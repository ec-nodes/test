import paramiko
import concurrent.futures
import re
from datetime import datetime

ssh_port = 22
combined_command = "journalctl -u etny-vagrant -n 1500 && systemctl status etny-vagrant"

def calculate_time_elapsed(start_time, end_time):
    start = datetime.strptime(start_time, "%b %d %H:%M:%S")
    end = datetime.strptime(end_time, "%b %d %H:%M:%S")
    elapsed = end - start

    hours, remainder = divmod(elapsed.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    elapsed_time = f"{hours:02}h, {minutes:02}min ago"
    return elapsed_time

def check_journal(ip, username, password):
    try:
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(ip, port=ssh_port, username=username, password=password)

        stdin, stdout, stderr = ssh_client.exec_command(combined_command)
        output = stdout.read().decode()

        ssh_client.close()

        success_found = False
        active_status = None
        failed_status = False

        for line in output.splitlines():
            if "DP request created successfully!" in line:
                success_found = True
                timestamp_match = re.search(r'^(\w+\s+\d+\s\d+:\d+:\d+)', line)
                if timestamp_match:
                    timestamp = timestamp_match.group(1)
                    elapsed_time = calculate_time_elapsed(timestamp, datetime.now().strftime("%b %d %H:%M:%S"))
                    status = f"{ip}: {elapsed_time}"
            if "Active:" in line:
                active_status_match = re.search(r'Active:\s+(.*?)$', line)
                if active_status_match:
                    active_status = active_status_match.group(1).strip()
            if "failed" in line:
                failed_status = True

        if success_found:
            status = f"{ip}: {elapsed_time}"
            if failed_status:
                status += " - Failed"
            elif active_status and "active" in active_status:
                status += " - Active"
            return status  # Return the status

    except paramiko.AuthenticationException:
        return f"{ip}: Authentication Failed"
    except paramiko.SSHException as e:
        return f"{ip}: SSH Error - {e}"
    except Exception as e:
        return f"{ip}: {e}"

def main():
    print("    Node IP      Last Call      Status")
    print("---------------------------------------")

    with open("data", "r") as file:
        data_lines = file.readlines()
        data = [line.strip().split() for line in data_lines]

    with concurrent.futures.ThreadPoolExecutor() as executor:
        results = executor.map(lambda x: check_journal(x[0], x[1], x[2]), data)

    # Print results in order
    for result in results:
        if result is not None:
            print(result)

if __name__ == "__main__":
    main()
